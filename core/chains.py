import os
from langchain_community.llms import Ollama
from langchain.chains import RetrievalQA
from langchain.prompts import PromptTemplate
from langchain.schema import BaseRetriever
from typing import List, Dict, Any


def load_prompt():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open("system_prompt.txt", "r", encoding="utf-8") as f:
            return f.read().strip()
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞: {e}")
        return "–¢—ã ‚Äî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ."


class CustomQAChat:
    """–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è QA —Ü–µ–ø–æ—á–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º retriever"""
    
    def __init__(self, retriever, model_name):
        self.retriever = retriever
        self.system_prompt = load_prompt()
        self.cache = {}  # –ü—Ä–æ—Å—Ç–æ–π –∫—ç—à –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
        self.cache_hits = 0
        self.cache_misses = 0
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ Ollama
        self.llm = Ollama(
            model=model_name,
            temperature=0.3,
            num_predict=256,
            num_gpu=int(os.getenv("OLLAMA_NUM_GPU", 1)),
            num_thread=int(os.getenv("OLLAMA_NUM_THREADS", 6))  # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        )
        
        print(f"‚úÖ QA —Ü–µ–ø–æ—á–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –º–æ–¥–µ–ª—å—é {model_name}")
    
    def _is_similar_query(self, query1: str, query2: str, threshold: float = 0.5) -> bool:  # –°–Ω–∏–∂–µ–Ω –ø–æ—Ä–æ–≥ —Å 0.7 –¥–æ 0.5
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ—Ö–æ–∂–∏ –ª–∏ –¥–≤–∞ –∑–∞–ø—Ä–æ—Å–∞"""
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        words1 = set(query1.split())
        words2 = set(query2.split())
        
        if not words1 or not words2:
            return False
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ö–æ–¥—Å—Ç–≤–æ –ñ–∞–∫–∫–∞—Ä–∞
        intersection = len(words1.intersection(words2))
        union = len(words1.union(words2))
        
        if union == 0:
            return False
        
        similarity = intersection / union
        return similarity >= threshold
    
    def __call__(self, inputs: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç"""
        query = inputs.get("query", "").strip().lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
        if query in self.cache:
            self.cache_hits += 1
            print(f"‚ö° –ö—ç—à-—Ö–∏—Ç! –û—Ç–≤–µ—Ç –∏–∑ –∫—ç—à–∞ (–≤—Å–µ–≥–æ —Ö–∏—Ç: {self.cache_hits})")
            return {"result": self.cache[query]}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ö–æ–∂–∏–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –∫—ç—à–µ
        for cached_query in self.cache.keys():
            if self._is_similar_query(query, cached_query):
                self.cache_hits += 1
                print(f"‚ö° –ö—ç—à-—Ö–∏—Ç! –ü–æ—Ö–æ–∂–∏–π –∑–∞–ø—Ä–æ—Å –Ω–∞–π–¥–µ–Ω (–≤—Å–µ–≥–æ —Ö–∏—Ç: {self.cache_hits})")
                return {"result": self.cache[cached_query]}
        
        self.cache_misses += 1
        print(f"üîÑ –ö—ç—à-–º–∏—Å—Å! –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (–≤—Å–µ–≥–æ –º–∏—Å—Å: {self.cache_misses})")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        docs = self.retriever.get_relevant_documents(query)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        context = "\n\n".join([doc.page_content for doc in docs])
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
        prompt = f"""{self.system_prompt}

–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}
–í–æ–ø—Ä–æ—Å: {query}
–û—Ç–≤–µ—Ç:"""
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
        try:
            response = self.llm.invoke(prompt)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
            if isinstance(response, bytes):
                try:
                    response = response.decode('utf-8')
                except UnicodeDecodeError:
                    response = response.decode('utf-8', errors='ignore')
            elif not isinstance(response, str):
                response = str(response)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞)
            if len(self.cache) < 50:  # –ú–∞–∫—Å–∏–º—É–º 50 –∑–∞–ø–∏—Å–µ–π
                self.cache[query] = response
            
            return {"result": response}
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏: {e}")
            return {"result": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."}


def init_qa_chain(retriever, model_name):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ü–µ–ø–æ—á–∫—É –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç"""
    return CustomQAChat(retriever, model_name)